name: Index embeddings
description: Component that takes embeddings of text snippets and indexes them into a weaviate vector database.
image: index_embeddings:latest

consumes:
  text:
    fields:
      data:
        type: string
      embedding:
        type: array
        items:
          type: float32

args:
  weaviate_url:
    description: The URL of the weaviate instance.
    type: str
    default: http://localhost:8080
  batch_size:
    description: |
      The batch size to be used.
      Parameter of weaviate.batch.Batch().configure().
    type: int
    default: 100
  dynamic:
    description: |
      Whether to use dynamic batching or not.
      Parameter of weaviate.batch.Batch().configure().
    type: bool
    default: True
  num_workers:
    description: |
      The maximal number of concurrent threads to run batch import.
      Parameter of weaviate.batch.Batch().configure().
    type: int
    default: 2
  overwrite:
    description: Whether to overwrite/ re-create the existing weaviate class and its embeddings.
    type: bool
    default: False
  class_name:
    description: |
      The name of the weaviate class that will be created and used to store the embeddings.
      Should follow the weaviate naming conventions.
    type: str
    default: Article
  vectorizer:
    description: |
      The configuration of the weaviate vectorizer (for vectorization with text2vec-* modules) in the class object 
      corresponding to the model used to generate the embeddings. 
      You can find the available modules in the weaviate documentation: https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules. 
      This can be used for smoother interaction with the weaviate instance after indexing e.g. using langchain similarity search. 
      The module used also has to be enabled in your weaviate instance deployment. 
      Can also be {"vectorizer": "none"} if you do not want to make use of this feature.
    type: dict
    default: {"vectorizer": "none"}
  